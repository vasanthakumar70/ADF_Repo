{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "delimiterfile",
						"type": "DatasetReference"
					},
					"name": "CSVfromBlob"
				},
				{
					"dataset": {
						"referenceName": "Azure_sql",
						"type": "DatasetReference"
					},
					"name": "sqltable"
				},
				{
					"dataset": {
						"referenceName": "Azure_sql",
						"type": "DatasetReference"
					},
					"name": "Location"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "delimiterfile",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Fullname"
				},
				{
					"name": "FillterActiveandAge"
				},
				{
					"name": "AggPurchaseAmount"
				},
				{
					"name": "AddSegmentt"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as short,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Age as short,",
				"          IsActive as boolean,",
				"          {LocationID } as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVfromBlob",
				"source(output(",
				"          CustomerID as integer,",
				"          Month as string,",
				"          PurchaseAmount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from CustomerPurchases',",
				"     format: 'query') ~> sqltable",
				"source(output(",
				"          LocationID as integer,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from LocationDetails',",
				"     format: 'query') ~> Location",
				"FillterActiveandAge derive(Fullname = concat(FirstName,' ',LastName)) ~> Fullname",
				"CSVfromBlob filter(equals(IsActive,true()) && greaterOrEqual(Age,18)) ~> FillterActiveandAge",
				"sqltable aggregate(groupBy(CustomerID),",
				"     TotalSpend = sum(PurchaseAmount)) ~> AggPurchaseAmount",
				"AggPurchaseAmount derive(CustomerSegment = iif(TotalSpend > 5000, 'High Spender', iif(TotalSpend >= 1000, 'Medium Spender', 'Low Spender'))) ~> AddSegmentt",
				"lookup1, AddSegmentt join(CSVfromBlob@CustomerID == AggPurchaseAmount@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sort(asc(Fullname, true)) ~> sort1",
				"sort1 select(mapColumn(",
				"          CustomerKey,",
				"          CustomerID = CSVfromBlob@CustomerID,",
				"          Fullname,",
				"          Age,",
				"          TotalSpend,",
				"          CustomerSegment,",
				"          Region",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"surrogateKey1, Location lookup({LocationID } == LocationID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"Fullname keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('personal_details_', toString(currentUTC(),'yyyyMMdd'))\r",
				")],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}